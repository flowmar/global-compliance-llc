//-
  @Author: flowmar
  @Date: 2022-07-02 23:10:32
  @Last Modified by: flowmar
  @Last Modified time: 2022-07-08 07:06:27


extends layout.pug

block style
  style.
    .form-label{
    color: #fff;
    }


block content
  .container-fluid
    .row.mt-5
      .col-4.display-5.mx-5.page-title Edit Mariner
      .col-7
    .row.bg-dark.m-3.p-1.py-3
      .col.shadow-4-strong.bg-light.bg-opacity-25.p-4.d-flex.justify-content-evenly.m-2.mb-0
        .container
          form(id="editMarinerForm" name="editMarinerForm" data-parsley-validate action="/edit" method="post")
            .row.my-4
              .col-6
              .col-6.d-flex.justify-content-end.p-0
                #buttonDiv
                  button.btn.mx-2#appModalButton(data-mdb-target="#applicationModal" style="background-color: var(--yellow-color);" value="Application")
                    i.bi.bi-file-medical(style="font-size: 1rem;")
                    span   &nbsp;Application
                  button.btn.mx-2(type="button" style="background-color: var(--yellow-color);" value="Print" onclick="downloadMarinerPDF()")
                    i.bi.bi-printer(style="font-size: 1rem;")
                    span   &nbsp;Print
                a.btn.mx-1(id="licenses-button" data-mdb-target="#licensesModal" type="button" href='/licenses' style="background-color: var(--yellow-color);" value="Licenses" target="_blank")
                  i.bi.bi-credit-card(style="font-size: 1rem;")
                  span   &nbsp;Licenses
            br
            .row
              .col
                .display-5.fw-bold Mariner Information
            hr.mt-1
            .row.my-4
              .col-3
                label.form-label(for="mariner-id") Mariner ID:
                input.form-control(id="mariner-id" name="marinerID" type="text" style="background-color: var(--highlight-bg-color);" value="" disabled)
                input.form-control(id="marinerIDHidden" name="marinerIDNumber" hidden)
              .col-6
              .col-3
                label.form-label(for="application-id") Application ID:
                input.form-control(id="application-id" name="applicationID" type="text" style="background-color: var(--highlight-bg-color);" value="" disabled)
                input.form-control(id="applicationIDHidden" name="applicationIDNumber" hidden)
            .row.my-4
              .col-4
                label.form-label(for="first-name") First Name:
                input.form-control.bg-white(id="first-name" name="firstName" data-parsley-required="true" type="text")
              .col-4
                label.form-label(for="middle-name") Middle Name:
                input.form-control.bg-white(id="middle-name" name="middleName" type="text")
              .col-4
                label.form-label(for="last-name") Last Name:
                input.form-control.bg-white(id="last-name" name="lastName" data-parsley-required="true" type="text")
            .row.my-4
              .col-3
                label.form-label(for="height") Height:
                input.form-control.bg-white(id="height" name="height" type="text")
              .col-3
                label.form-label(for="weight") Weight:
                input.form-control.bg-white(id="weight" name="weight" type="text")
              .col-3
                label.form-label(for="hairColor") Hair Color:
                input.form-control.bg-white(id="hairColor" name="hair" type="text")
              .col-3
                label.form-label(for="eyeColor") Eye Color:
                input.form-control.bg-white(id="eyeColor" name="eyeColor" data-parsley-required="false" type="text")
            .row.my-4
              .col-3
                label.form-label(for="birth-city") City of Birth:
                input.form-control.bg-white(id="birth-city" name="birthCity" type="text")
              .col-3
                label.form-label(for="birth-state") State of Birth:
                input.form-control.bg-white(id="birth-state" name="birthState" type="text" required)
              .col-3
                label.form-label(for="birth-country") Country of Birth:
                select.form-select.bg-white(id="birth-country" name="birthCountry" aria-label="Select birth country")
              .col-3
                label.form-label(for="birth-date") Birth Date:
                input.form-control.bg-white.text-dark(id="birth-date" name="birthDate" data-parsley-required="true" type="date")
            .row.my-4
              .col-4
                label.form-label(for="marks") Distinguishing Marks:
                input.form-control.bg-white(id="marks" name="marks")
              .col-4
                label.form-label(for="physLocation") Physical Location:
                input.form-control.bg-white.text-dark(id="physLocation" name="physLocation")
              .col-4
                label.form-label(for="physDate") Date of Physical:
                input.form-control.bg-white(id="physDate" name="physDate" data-parsley-required="false" type="date")
            .row.my-3
            hr
            .row.my-4
              .col-7
                label.form-label(for="address") Street Address:
                input.form-control.bg-white(id="address" name="address" type="text")
            .row.my-4
              .col-3
                label.form-label(for="city") City:
                input.form-control.bg-white(id="city" name="city" type="text")
              .col-1
              .col-3
                label.form-label(for="state") State:
                input.form-control.bg-white(id="state" name="state" type="text")
              .col-1
              .col-3
                label.form-label(for="zip-code") Zip Code:
                input.form-control.bg-white(id="zip-code" name="zipCode" type="text")
            .row.my-4
              .col-3
                label.form-label(for="phone-number") Mobile Number:
                input.form-control.bg-white(id="phone-number" name="phone" type="tel" onkeydown="phoneNumberFormatter()")
              .col-1
              .col-3
                label.form-label(for="home-phone") Home Number:
                input.form-control.bg-white(id="home-phone" name="homePhone" type="tel" onkeydown="homePhoneNumberFormatter()")
              .col-1
              .col-4
                label.form-label(for="email") Email:
                input.form-control.bg-white(id="email" name="email" data-parsley-required="false" type="email")
            .row.my-4
              .col-4
                label.form-label(for="passport-number") Passport Number:
                input.form-control.bg-white(id="passport-number" name="passportNumber" data-parsley-type="digits" type="text")
              .col-4
                label.form-label(for="citizenship") Citizenship:
                select.form-select.bg-white(id="citizenship" name="citizenship" aria-label="Select citizenship")
            hr.my-4.mt-5
            .row.mb-2
              .col-4
                label.form-label(for="employer") Employer:
                select.form-select.bg-white(id="employer" name="employer")
                  option(value)
              .col-4
                label.form-label(for="vessel-name") Rig:
                select.form-select.bg-white(id="vessel-name" name="vessel" type="text")
                  option(value)
            .row.my-4
              .col-4
                label.form-label(for="mariner-reference-number") Mariner Reference Number:
                input.form-control.bg-white(id="mariner-reference-number" name="marinerRefNum" data-parsley-type="digits" type="text")
            .row.my-4
              .col-4
                label.form-label(for="coContact") Co. Contact:
                input.form-control.bg-white(id="coContact" name="coContact" type="text")
              .col-4
                label.form-label(for="imoNumber") IMO Number:
                input.form-control.bg-white(id="imoNumber" name="imoNumber" data-parsley-type="digits" type="text")
            .row.my-4
              .col-4
                label.form-label(for="processing-agent") Processing Agent:
                select.form-select.bg-white.text-dark(id="processing-agent" name="processingAgent")
              .col-4
              .col-4
                label.form-label(for="status") Status:
                select.form-select.bg-white.text-dark(id="status" name="status")
                  option(value="0")
                  option(value="Pending") Pending
                  option(value="Submitted") Submitted
                  option(value="Completed") Completed
            .row.my-4
              .col
              .col.d-flex.justify-content-end
                a.btn.m-2.text-dark(id="cancel-edit-mariner-button" href="/search" style="background-color: var(--red-color); color:#4f4f4f;" value="Cancel")
                  i.bi.bi-x-square
                  span    &nbsp;Cancel
                button.btn.m-2.text-dark(id="save-edited-mariner" style="background-color: var(--green-color); color:#4f4f4f;" value="Save")
                  i.bi.bi-sd-card
                  span    &nbsp;Save
          br
          .container-fluid.p-0
            .row
              .col
                .display-5.fw-bold Mariner Notes
            hr.mt-1
            .row.mt-4.position-relative
              .col
                table.table.table-bordered.table-sm#activityTable
                  thead.table-dark
                    tr.text-center
                      th(scope="col") Date
                      th(scope="col") Activity
                      th(scope="col") Agent
                  tbody.bg-white.text-dark.table-group-divider.table-divider-color(style="font-size: 1rem; font-weight: bold;")#activityTableBody
            .row
              .col.d-flex.justify-content-end
                button.btn.btn-info.m-2.buttons(id="edit-mariner-activity-button" data-mdb-target="#editActivityModal")
                  i.bi.bi-pencil-square.text-dark
                  span.text-dark   &nbsp;Edit
                button.btn.m-2.buttons(id="delete-mariner-activity-button" type="button" onclick="confirmAndDeleteActivity()" style="background-color: var(--red-color);")
                  i.bi.bi-x-circle-fill.text-dark
                  span.text-dark   &nbsp;Delete
          form(id="activityForm" action="/activity" method="POST")
            .row.mt-4
              .col
                label.form-label(for="notes") New Note:
                textarea.form-control.bg-white.text-dark(id="notes" name="activity" data-parsley-maxlength="255" type="text" form="activityForm" maxlength="255")
                input.form-control(id="activityProcessingAgent" name='activityProcessingAgent' hidden)
                input.form-control(id="marinerActivityID" name="marinerIDActivity" hidden)
            .row.mt-0.pr-2
              .col.d-flex.justify-content-end
                span#characterCountMessage
            .row
              .col
              .col-3.d-flex.justify-content-end#saveMarinerActivity
                button.form-control.btn.m-2.text-dark(id="save-mariner-activity-button" type='submit' style="background-color: var(--green-color); color:#4f4f4f;" value="Save" form="editMarinerForm" onclick="saveMarinerActivity()")
                  i.bi.bi-sd-card(style="font-size=1rem")
                  span    &nbsp;Save
          br
          .container-fluid.p-0
            .row
              .col
                .display-5.fw-bold Mariner Attachments
            hr.mt-1
            .row.mt-4.position-relative
              .col
                table.table.table-bordered.table-sm#attachmentsTable
                  thead.table-dark
                    tr.text-center
                      th(scope="col") Date
                      th(scope="col") Attachment
                      th(scope="col") Agent
                  tbody.bg-white.text-dark.table-group-divider.table-divider-color(style="font-size: 1rem; font-weight: bold;")#attachmentsTableBody
            .row
              .col.d-flex.justify-content-end
                button.btn.btn-primary.m-2.attachment-buttons(id="download-mariner-attachment-button" onclick="downloadMarinerAttachment()")
                  i.bi.bi-download.text-dark
                  span.text-dark   &nbsp;Download
                button.btn.btn-danger.m-2.attachment-buttons(id="delete-mariner-attachment-button" type="button" onclick="confirmAndDeleteAttachment()")
                  i.bi.bi-x-circle-fill.text-dark
                  span.text-dark   &nbsp;Delete
          form.form-horizontal.d-inline(id="attachmentForm" method="POST" action="/attachment" enctype="multipart/form-data")
            .row.my-4
              .col-6
                label(for="attachmentNameInput") Attachment Name:
                input.form-control.text-dark(id='attachmentNameInput' name="attachmentName" type='text')
              .col-6
                label(for="attachment-input-group") New Attachment:
                .input-group#attachment-input-group
                  input.form-control.form-control-file.text-dark(id="attachment-file" name="attachment" type="file")
                  button.input-group-text.btn(id="attachment-upload-button" type="submit" style="background-color: var(--yellow-color); font-weight: bold;" value="Upload") Upload
            //- .row.my-4
            //-   .col
            //-     button.btn.btn-lg.mx-2#appModalButton(style="background-color: var(--yellow-color);" type="button" value="Application" data-mdb-target="#applicationModal")
            //-       i.bi.bi-file-medical(style="font-size: 1rem;")
            //-       span   &nbsp;Application
            //-     a.btn.btn-lg.mx-1(style="background-color: var(--yellow-color);" type="button" id="licenses-button" value="Licenses" data-mdb-target="#licensesModal" href='/licenses' target="_blank")
            //-       i.bi.bi-credit-card(style="font-size: 1rem;")
            //-       span   &nbsp;Licenses

  include includes/applicationModal
  include includes/editActivityModal

  script(src="/js/edit.js")
  script.
    // Get the selected Mariner
    let marinerObject = !{JSON.stringify(viewMariner)};
    console.log(marinerObject);
    console.log(marinerObject['MarinerID']);
    let viewMarinerID = marinerObject['MarinerID'];
    //- console.log(viewMarinerID);
    let viewApplicationID = marinerObject['ApplicationID'];
    //- console.log(viewApplicationID);

      // Stringify the countries, agents an employers
    let countriesArray = !{JSON.stringify(countries)};
    let agentsArray = !{JSON.stringify(agents)};
    let employersArray = !{JSON.stringify(employers)};
    let activitiesArray = !{JSON.stringify(activities)};
    let attachmentsArray = !{JSON.stringify(attachments)};
    let rigsArray = !{JSON.stringify(rigs)};

    // Get the current User and place into the UI
    let storedUser = window.localStorage.getItem("currentUser");
    //- console.log(agentsArray);
    let agentNames = [];
    for(let agent of agentsArray) {
      agentNames.push(agent['AgentName']);
    }
    //- console.log(agentNames);
    let currentProcessingAgentID = agentNames.indexOf(storedUser) + 1;
    window.localStorage.setItem('processingAgentID', currentProcessingAgentID);
    //- console.log(currentProcessingAgentID);
    //- console.log("user:" + storedUser);
    let activityProcessingHidden = document.getElementById('activityProcessingAgent');
    //- console.log("element: " + activityProcessingHidden)
    activityProcessingHidden.setAttribute('value', currentProcessingAgentID);

    // Place the MarinerID into the UI
    let marinerHidden = document.getElementById('marinerIDHidden');
    //- console.log(marinerHidden);
    marinerHidden.setAttribute("value", viewMarinerID);
    let marinerActivityHidden = document.getElementById('marinerActivityID');
    marinerActivityHidden.setAttribute("value", viewMarinerID);

    // Place the ApplicationID into the UI
    let applicationIDHidden = document.getElementById('applicationIDHidden');
    if (viewApplicationID)
    {
      applicationIDHidden.setAttribute('value', viewApplicationID);
    }

    //- Wait until DOM is loaded
    window.addEventListener('DOMContentLoaded', (event) => {
    // Select inputs
    let citizenshipInput = document.getElementById('citizenship');
    let birthCountryInput = document.getElementById('birth-country');
    let employerInput = document.getElementById('employer');
    let agentInput = document.getElementById('processing-agent');

      // Place the countries into the UI
      for(let i = 0; i < countriesArray.length; i++) {
      // Citizenship input
      let element = document.createElement('option');
      element.value = i + 1;
      element.text = countriesArray[i]['CountryName'];
      citizenshipInput.appendChild(element);
      // Birth country input
      let element2 = document.createElement('option');
      element2.value = i + 1;
      element2.text = countriesArray[i]['CountryName'];
      birthCountryInput.appendChild(element2);
    }

    //- Create option elements for Employers
    for(k = 0; k  < employersArray.length; k++) {
      let element3 = document.createElement('option');
      element3.value= employersArray[k]["EmployerID"];
      element3.text = employersArray[k]["EmployerID"] + " - " + employersArray[k]["EmployerName"];
      employerInput.appendChild(element3);
    }

    //- Create option elements for Agents
    for(l = 0; l < agentsArray.length; l++) {
      let element4 = document.createElement('option');
      element4.value = agentsArray[l]["AgentID"];
      element4.text = agentsArray[l]["AgentName"];
      agentInput.appendChild(element4);
    }

    // Place the values from the mariner object into the UI
    let marinerIDArea = $('#mariner-id');
    console.log(marinerObject);
    marinerIDArea.val(viewMarinerID);
    $('#application-id').val(marinerObject['ApplicationID']);
    $('#first-name').val(marinerObject['FirstName']);
    $('#last-name').val(marinerObject['LastName']);
    $('#middle-name').val(marinerObject['MiddleName']);
    $('#address').val(marinerObject['StreetAddress']);
    $('#phone-number').val(marinerObject['PhoneNumber']);
    $('#email').val(marinerObject['Email']);
    $('#employer').val(marinerObject['EmployerID']);
    //- $('#vessel-name').val(marinerObject['']);
    $('#mariner-reference-number').val(marinerObject['MarinerReferenceNumber']);
    $('#passport-number').val(marinerObject['PassportNumber']);
    $('#citizenship').val(marinerObject['Citizenship']);
    $('#birth-city').val(marinerObject['BirthCity']);
    $('#birth-state').val(marinerObject['BirthState']);
    $('#birth-country').val(marinerObject['BirthCountry']);
    $('#height').val(marinerObject['Height']);
    $('#weight').val(marinerObject['Weight']);
    $('#hairColor').val(marinerObject['HairColor']);
    $('#eyeColor').val(marinerObject['EyeColor']);
    $('#marks').val(marinerObject['Marks']);
    $('#physLocation').val(marinerObject['PhysLocation']);
    let physDateString = new Date(marinerObject['PhysDate']).toISOString();
    let physDate = physDateString.slice(0, 10);
    $('#physDate').val(physDate);
    $('#coContact').val(marinerObject['CoContact']);
    $('#imoNumber').val(marinerObject['IMONum']);
    $('#city').val(marinerObject['City']);
    $('#state').val(marinerObject['State']);
    $('#zip-code').val(marinerObject['ZipCode']);
    $('#country').val(marinerObject['Country']);
    $('#home-phone').val(marinerObject['HomePhone']);

    // Convert the birth date to a format that fits in the UI
    let dateString = new Date(marinerObject['BirthDate']).toISOString();
    console.log(dateString);
    console.log(dateString.slice(0, 10));
    let birthDate = dateString.slice(0, 10);
    $('#birth-date').val(birthDate);
    $('#processing-agent').val(marinerObject['ProcessingAgent']);
    $('#status').val(marinerObject['Status']);

    // Place the activity information into the UI
    let activityTableBody = $('#activityTableBody');
    //- console.log(activitiesArray);

    // Loop through activitiesArray
    for (let activity of activitiesArray){

    // Format the Date
    let formattedDate = new Date(activity['ActivityDate']).toString();
    let formattedTime = new Date(activity['ActivityDate']).toLocaleTimeString();
    //- console.log(formattedTime);
    //- console.log(formattedDate);
    formattedDateArray = formattedDate.split(' ');
    //- console.log(formattedDateArray);
    formattedDate = formattedDateArray[0] + ' ' + formattedDateArray[1] + ' ' + formattedDateArray[2] + ' ' + formattedDateArray[3] + ' ' + formattedTime;

    // Format Processing Agent
    let processingAgentID = parseInt(activity['ProcessingAgent']);
    let index = processingAgentID - 1;
    let processingAgentName = agentsArray[index]['AgentName'];
    //- console.log(processingAgentName);
    // Create the table row
    let tableRow = document.createElement('tr');
    tableRow.dataset.activityid = activity['ActivityID'];
    tableRow.dataset.marinerid = activity['MarinerID'];
    tableRow.dataset.activity = activity['ActivityNote'];
    tableRow.dataset.processingAgent = activity['ProcessingAgent'];
    tableRow.style = "text-align: center;";

    // Add the cells
    tableRow.innerHTML = "<td id='" + activity['ActivityID']  + "' data-mariner-id='" + activity['MarinerID'] + "'>" + formattedDate + "</td><td>" + activity['ActivityNote'] + "</td><td>" + processingAgentName + "</td>";
    // Append to the table
    activityTableBody.append(tableRow);

    }
    let attachmentTableBody = document.getElementById('attachmentsTableBody');

    for (attachment of attachmentsArray){
      console.log(attachment);

      let attachmentDate = attachment.MarinerAttachmentDate;
      let attachmentID = attachment.MarinerAttachmentID;
      let attachmentFileName = attachment.AttachmentFileName;
      let attachmentName = attachment.AttachmentName
      let processingAgent = attachment.ProcessingAgent;

      // Format the Date
    let formattedDate = new Date(attachmentDate).toString();
    let formattedTime = new Date(attachmentDate).toLocaleTimeString();
    console.log(formattedTime);
    console.log(formattedDate);
    formattedDateArray = formattedDate.split(' ');
    console.log(formattedDateArray);
    formattedDate = formattedDateArray[0] + ' ' + formattedDateArray[1] + ' ' + formattedDateArray[2] + ' ' + formattedDateArray[3] + ' ' + formattedTime;

    // Format Processing Agent
    let processingAgentID = parseInt(processingAgent);
    let index = processingAgentID - 1;
    let processingAgentName = agentsArray[index]['AgentName'];

      // Create table row
      let tableRow = document.createElement("tr");
      tableRow.dataset.attachmentId = attachmentID;
      tableRow.dataset.attachmentName = attachmentName;
      tableRow.dataset.attachmentAgent = processingAgent;
      tableRow.style = 'text-align:center;'
      // Create table row cells
      tableRow.innerHTML = `<td>${formattedDate}</td> <td>${attachmentName}</td> <td>${processingAgentName}</td>`;

      // Append to the attachment table body
      attachmentTableBody.appendChild(tableRow);

    }
    });

  script(src="/js/validation.js")
